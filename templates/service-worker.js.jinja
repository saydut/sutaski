// templates/service-worker.js.jinja (TAM VE GÜNCEL HALİ)

const CACHE_NAME = 'sut-takip-cache-v{{ cache_version }}';

// Önbelleğe alınacak ana uygulama sayfaları (HTML)
const APP_SHELL_URLS = [
    '/',
    '/login',
    '/offline',
    '/tedarikciler',
    '/raporlar',
    '/yem/yonetim',
    '/finans/'
];

// Önbelleğe alınacak statik varlıklar (CSS, JS, Resimler, Fontlar vb.)
const STATIC_ASSETS = [
    '/static/style.css',
    '/static/theme.js',
    '/static/js/utils.js',
    '/static/js/api.js',
    '/static/js/store.js',
    '/static/js/ui.js',
    '/static/js/main.js',
    '/static/js/login.js',
    '/static/js/offline.js',
    '/static/js/tedarikciler.js',
    '/static/js/tedarikci_detay.js',
    '/static/js/yem_yonetimi.js',
    '/static/js/finans_yonetimi.js',
    '/static/js/reports.js',
    '/static/js/charts.js',
    '/static/js/chart-manager.js',
    '/static/images/icon.png',
    'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css',
    'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js',
    'https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.bootstrap5.css',
    'https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js',
    'https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css',
    'https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.js',
    'https://npmcdn.com/flatpickr/dist/l10n/tr.js',
    'https://unpkg.com/dexie@3/dist/dexie.js',
    'https://cdn.jsdelivr.net/npm/chart.js',
    'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css',
    'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/fonts/bootstrap-icons.woff2?v=1.11.3'
];

self.addEventListener('install', event => {
  event.waitUntil(
    (async () => {
      const cache = await caches.open(CACHE_NAME);
      console.log('Cache açıldı ve varlıklar önbelleğe alınıyor.');

      // Statik varlıkları ve uygulama kabuğunu önbelleğe al
      const allAssetsToCache = [...STATIC_ASSETS, ...APP_SHELL_URLS];
      
      try {
        await cache.addAll(allAssetsToCache);
      } catch (error) {
          console.error('Tüm varlıklar önbelleğe alınamadı, tek tek deneniyor:', error);
          // Eğer allAll başarısız olursa (genellikle tek bir dosya yüzünden), tek tek eklemeyi dene
          for (const asset of allAssetsToCache) {
              try {
                  await cache.add(asset);
              } catch (err) {
                  console.warn(`'${asset}' önbelleğe alınamadı:`, err);
              }
          }
      }
    })()
  );
  self.skipWaiting();
});

self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('Eski cache siliniyor:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  self.clients.claim();
});

self.addEventListener('fetch', event => {
    const url = new URL(event.request.url);

    // API istekleri için yeni strateji
    if (url.pathname.startsWith('/api/')) {
        event.respondWith(
            fetch(event.request).catch(() => {
                // Ağ hatası olduğunda (çevrimdışı), HTML yerine standart bir JSON hatası döndür.
                // Bu, JavaScript'in "geçersiz JSON" hatası almasını engeller.
                return new Response(JSON.stringify({ error: 'İnternet bağlantısı yok veya sunucuya ulaşılamıyor.' }), {
                    status: 503, // Service Unavailable
                    headers: { 'Content-Type': 'application/json' }
                });
            })
        );
        return;
    }
    
    // HTML sayfa navigasyonu için strateji
    if (event.request.mode === 'navigate') {
        event.respondWith(
            (async () => {
                try {
                    // Önce internetten almayı dene
                    const networkResponse = await fetch(event.request);
                    return networkResponse;
                } catch (error) {
                    // İnternet yoksa, önbellekten vermeyi dene
                    console.log(`Ağ hatası: '${event.request.url}' için önbellekten sunuluyor.`);
                    const cache = await caches.open(CACHE_NAME);
                    const cachedResponse = await cache.match(event.request.url);
                    // İstenen sayfa önbellekte varsa onu, yoksa genel /offline sayfasını ver
                    return cachedResponse || await cache.match('/offline');
                }
            })()
        );
        return;
    } 
    
    // Statik dosyalar (CSS, JS, resimler vb.) için strateji
    // Önce önbelleğe bak, yoksa internetten çek.
    event.respondWith(
        caches.match(event.request).then(response => {
            return response || fetch(event.request);
        })
    );
});